/*
 * 		CableSelectionPanel.java
 *   Copyright (C) 2016  Adrián E. Córdoba [software.asia@gmail.com]
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * 		CableSelectionPanel.java
 *  Adrián E. Córdoba [software.asia@gmail.com] 		Jul 20, 2017
 */
package ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.windows.dialogs;

import ar.com.adriancordoba.app.console.commonservices.database.DatabaseConnectionsManager;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.distributor.Site;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.wiring.StreetCable;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.wiring.StreetFrame;
import ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.utils.CablesAnalyzer;
import ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.utils.SitesAnalyzer;
import ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.windows.models.CableComboBoxRenderer;
import java.sql.Connection;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Adrián E. Córdoba [software.asia@gmail.com]
 */
public class CableSelectionPanel extends javax.swing.JPanel {

    /**
     * Creates new form CableSelectionPanel
     */
    public CableSelectionPanel() {
        createComboBoxModels();
        cableComboBoxRenderer = new CableComboBoxRenderer();
        initComponents();

        Connection connection = null;
        try {
            databaseConnectionsManager = DatabaseConnectionsManager.getInstance();
            connection = databaseConnectionsManager.takeConnection();

            sitesAnalyzer = new SitesAnalyzer();
            cablesAnalyzer = new CablesAnalyzer(connection);

            fillComboBoxModel(sitesAnalyzer.getSitesList(), siteComboBoxModel);
        } catch (Exception ex) {
            logger.error("Cannot fill combo boxes or list.", ex);
            JOptionPane.showMessageDialog(this, bundle.getString("CablesPairsInternalFrame.comboBoxes.problem"), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            databaseConnectionsManager.returnConnection(connection);
        }
    }

    private void createComboBoxModels() {
        siteComboBoxModel = new DefaultComboBoxModel<>();
        frameComboBoxModel = new DefaultComboBoxModel<>();
        cableComboBoxModel = new DefaultComboBoxModel<>();
    }

    /**
     *
     * @param <T>
     * @param list
     * @param model
     */
    private <T> void fillComboBoxModel(List<T> list, DefaultComboBoxModel<T> model) {
        for (T element : list)
            model.addElement(element);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        siteLabel = new javax.swing.JLabel();
        siteComboBox = new javax.swing.JComboBox<>();
        frameLabel = new javax.swing.JLabel();
        frameComboBox = new javax.swing.JComboBox<>();
        cableLabel = new javax.swing.JLabel();
        cableComboBox = new javax.swing.JComboBox<>();

        siteLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/MainFrameBundle"); // NOI18N
        siteLabel.setText(bundle.getString("CableSelectionPanel.siteLabel.text")); // NOI18N

        siteComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        siteComboBox.setModel(siteComboBoxModel);
        siteComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siteComboBoxActionPerformed(evt);
            }
        });

        frameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        frameLabel.setText(bundle.getString("CableSelectionPanel.frameLabel.text")); // NOI18N

        frameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        frameComboBox.setModel(frameComboBoxModel);
        frameComboBox.setEnabled(false);
        frameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameComboBoxActionPerformed(evt);
            }
        });

        cableLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cableLabel.setText(bundle.getString("CableSelectionPanel.cableLabel.text")); // NOI18N

        cableComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cableComboBox.setModel(cableComboBoxModel);
        cableComboBox.setEnabled(false);
        cableComboBox.setRenderer(cableComboBoxRenderer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(siteLabel)
                    .addComponent(frameLabel)
                    .addComponent(cableLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(frameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(siteComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cableComboBox, 0, 80, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(siteLabel)
                    .addComponent(siteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frameLabel)
                    .addComponent(frameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cableLabel)
                    .addComponent(cableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void siteComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siteComboBoxActionPerformed
        frameComboBoxModel.removeAllElements();
        if (siteComboBox.getSelectedIndex() > 0) {
            int selectedSiteId = ((Site) siteComboBox.getSelectedItem()).getId();
            fillComboBoxModel(cablesAnalyzer.getStreetFramesList(selectedSiteId), frameComboBoxModel);
            frameComboBox.setEnabled(true);
            cableComboBox.setEnabled(true);
        } else if (siteComboBox.getSelectedIndex() == 0) {
            frameComboBox.setEnabled(false);
            cableComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_siteComboBoxActionPerformed

    private void frameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frameComboBoxActionPerformed
        cableComboBoxModel.removeAllElements();
        StreetFrame selectedFrame = (StreetFrame) frameComboBox.getSelectedItem();
        if (selectedFrame != null) {
            int selectedFrameId = selectedFrame.getId();
            fillComboBoxModel(cablesAnalyzer.getStreetCablesList(selectedFrameId), cableComboBoxModel);
        }
    }//GEN-LAST:event_frameComboBoxActionPerformed

    public StreetCable getCable() {
        return (StreetCable) cableComboBox.getSelectedItem();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<StreetCable> cableComboBox;
    private javax.swing.JLabel cableLabel;
    private javax.swing.JComboBox<StreetFrame> frameComboBox;
    private javax.swing.JLabel frameLabel;
    private javax.swing.JComboBox<Site> siteComboBox;
    private javax.swing.JLabel siteLabel;
    // End of variables declaration//GEN-END:variables

    private DatabaseConnectionsManager databaseConnectionsManager;
    private CablesAnalyzer cablesAnalyzer;
    private SitesAnalyzer sitesAnalyzer;
    private StreetCable cable;

    // Models
    private DefaultComboBoxModel<Site> siteComboBoxModel;
    private DefaultComboBoxModel<StreetFrame> frameComboBoxModel;
    private DefaultComboBoxModel<StreetCable> cableComboBoxModel;
    
    private CableComboBoxRenderer cableComboBoxRenderer;

    private ResourceBundle bundle = ResourceBundle.getBundle("i18n/MainFrameBundle"); // I18N
    private static final Logger logger = LogManager.getLogger(CableSelectionPanel.class);
}
