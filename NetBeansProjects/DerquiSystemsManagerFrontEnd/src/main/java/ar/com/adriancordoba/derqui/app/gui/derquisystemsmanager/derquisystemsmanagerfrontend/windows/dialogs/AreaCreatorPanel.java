/*
 * 		AreaCreatorPanel.java
 *   Copyright (C) 2016  Adrián E. Córdoba [software.asia@gmail.com]
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * 		AreaCreatorPanel.java
 *  Adrián E. Córdoba [software.asia@gmail.com] 		May 2, 2017
 */
package ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.windows.dialogs;

import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.phone.Area;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.phone.Country;
import ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.utils.StringFormat;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Adrián E. Córdoba [software.asia@gmail.com]
 */
public class AreaCreatorPanel extends javax.swing.JPanel {

    /**
     * Creates new form AreaCreatorPanel
     */
    public AreaCreatorPanel(int countryCode, String countryName, int areaCode, String areaName, List<Country> countriesList, List<Area> areasList) {
        this.countriesList = countriesList;
        this.areasList = areasList;
        initComponents();
        if (countryCode != 0) {
            countryCodeTextField.setText(String.valueOf(countryCode));
            if (countryName != null) {
                countryNameTextField.setText(countryName);
                countryNameTextField.setEnabled(false);
            }
        }
        if (areaCode != 0) {
            areaCodeTextField.setText(String.valueOf(areaCode));
            if (areaName != null) {
                areaNameTextField.setText(areaName);
                if (!countryName.isEmpty())
                    areaNameTextField.setEnabled(false);
            }
        }

        countryCodeTextField.requestFocus();
        logger.debug("Area creator panel was created.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countryPanel = new javax.swing.JPanel();
        countryCodeLabel = new javax.swing.JLabel();
        countryCodeTextField = new javax.swing.JTextField();
        countryNameLabel = new javax.swing.JLabel();
        countryNameTextField = new javax.swing.JTextField();
        areaPanel = new javax.swing.JPanel();
        areaCodeLabel = new javax.swing.JLabel();
        areaCodeTextField = new javax.swing.JTextField();
        areaNameLabel = new javax.swing.JLabel();
        areaNameTextField = new javax.swing.JTextField();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/MainFrameBundle"); // NOI18N
        countryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("AreaCreatorDialog.countryPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        countryCodeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        countryCodeLabel.setText(bundle.getString("AreaCreatorPanel.countryCodeLabel.text")); // NOI18N

        countryCodeTextField.setText(bundle.getString("AreaCreatorPanel.countryCodeTextField.text")); // NOI18N
        countryCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                countryCodeTextFieldFocusLost(evt);
            }
        });

        countryNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        countryNameLabel.setText(bundle.getString("AreaCreatorPanel.countryNameLabel.text")); // NOI18N

        countryNameTextField.setText(bundle.getString("AreaCreatorPanel.countryNameTextField.text")); // NOI18N

        javax.swing.GroupLayout countryPanelLayout = new javax.swing.GroupLayout(countryPanel);
        countryPanel.setLayout(countryPanelLayout);
        countryPanelLayout.setHorizontalGroup(
            countryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(countryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(countryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(countryPanelLayout.createSequentialGroup()
                        .addComponent(countryCodeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(countryCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(countryPanelLayout.createSequentialGroup()
                        .addComponent(countryNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        countryPanelLayout.setVerticalGroup(
            countryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(countryPanelLayout.createSequentialGroup()
                .addGroup(countryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryCodeLabel)
                    .addComponent(countryCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(countryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryNameLabel)
                    .addComponent(countryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        areaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("AreaCreatorDialog.areaPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        areaCodeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        areaCodeLabel.setText(bundle.getString("AreaCreatorPanel.areaCodeLabel.text")); // NOI18N

        areaCodeTextField.setText(bundle.getString("AreaCreatorPanel.areaCodeTextField.text")); // NOI18N
        areaCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                areaCodeTextFieldFocusLost(evt);
            }
        });

        areaNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        areaNameLabel.setText(bundle.getString("AreaCreatorPanel.areaNameLabel.text")); // NOI18N

        areaNameTextField.setText(bundle.getString("AreaCreatorPanel.areaNameTextField.text")); // NOI18N

        javax.swing.GroupLayout areaPanelLayout = new javax.swing.GroupLayout(areaPanel);
        areaPanel.setLayout(areaPanelLayout);
        areaPanelLayout.setHorizontalGroup(
            areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(areaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(areaPanelLayout.createSequentialGroup()
                        .addComponent(areaCodeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(areaCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(areaPanelLayout.createSequentialGroup()
                        .addComponent(areaNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(areaNameTextField)))
                .addContainerGap())
        );
        areaPanelLayout.setVerticalGroup(
            areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(areaPanelLayout.createSequentialGroup()
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(areaCodeLabel)
                    .addComponent(areaCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(areaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(areaNameLabel)
                    .addComponent(areaNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(countryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(areaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(countryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(areaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void countryCodeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_countryCodeTextFieldFocusLost
        String countryCodeStr = countryCodeTextField.getText().trim();
        if (!countryCodeStr.isEmpty()) {
            try {
                int countryCode = Integer.parseInt(countryCodeStr);
                if (countryCode != 0) {
                    String countryName = getCountryName(countryCode);
                    if (countryName != null) {
                        countryNameTextField.setText(countryName);
                        countryNameTextField.setEnabled(false);

                        String areaCodeStr = areaCodeTextField.getText().trim();
                        if (!areaCodeStr.isEmpty()) {
                            int areaCode = Integer.parseInt(areaCodeStr);
                            Area area = getArea(areaCode, countryCode);
                            if (area != null) {
                                areaNameTextField.setText(area.getName());
                                areaNameTextField.setEnabled(false);
                            } else {
                                areaNameTextField.setText("");
                                areaNameTextField.setEnabled(true);
                            }
                        }
                    } else {
                        countryNameTextField.setText("");
                        countryNameTextField.setEnabled(true);
                        areaNameTextField.setText("");
                        areaNameTextField.setEnabled(true);
                    }
                } else
                    JOptionPane.showMessageDialog(this, bundle.getString("AreaCreator.ValidationDialog.countryCode.invalid"), bundle.getString("AreaCreator.ValidationDialog.title"), JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException exception) {
                JOptionPane.showMessageDialog(this, bundle.getString("AreaCreator.ValidationDialog.countryCode.invalid"), bundle.getString("AreaCreator.ValidationDialog.title"), JOptionPane.ERROR_MESSAGE);
            }
        } else {
            countryNameTextField.setText("");
            countryNameTextField.setEnabled(true);
            areaNameTextField.setText("");
            areaNameTextField.setEnabled(true);
        }
    }//GEN-LAST:event_countryCodeTextFieldFocusLost

    private void areaCodeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_areaCodeTextFieldFocusLost
        String areaCodeStr = areaCodeTextField.getText();
        if (!areaCodeStr.isEmpty()) {
            try {
                int areaCode = Integer.parseInt(areaCodeStr);
                if (areaCode != 0) {
                    if (!countryCodeTextField.getText().trim().isEmpty()) {
                        int countryCode = Integer.parseInt(countryCodeTextField.getText().trim());
                        Area area = getArea(areaCode, countryCode);
                        if (area != null) {
                            countryNameTextField.setText(area.getCountry().getName());
                            countryNameTextField.setEnabled(false);
                            areaNameTextField.setText(area.getName());
                            areaNameTextField.setEnabled(false);
                        } else {
                            areaNameTextField.setText("");
                            areaNameTextField.setEnabled(true);
                        }
                    }

                } else
                    JOptionPane.showMessageDialog(this, bundle.getString("AreaCreator.ValidationDialog.areaCode.invalid"), bundle.getString("AreaCreator.ValidationDialog.title"), JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException exception) {
                JOptionPane.showMessageDialog(this, bundle.getString("AreaCreator.ValidationDialog.areaCode.invalid"), bundle.getString("AreaCreator.ValidationDialog.title"), JOptionPane.ERROR_MESSAGE);
            }
        } else {
            areaNameTextField.setText("");
            areaNameTextField.setEnabled(true);
        }

    }//GEN-LAST:event_areaCodeTextFieldFocusLost

    private String getCountryName(int countryCode) {
        String countryName = null;
        for (Country country : countriesList) {
            if (country.getCode() == countryCode) {
                countryName = country.getName();
                break;
            }
        }
        return countryName;
    }

    private Area getArea(int areaCode, int countryCode) {
        Area area = null;
        for (Area temp : areasList) {
            if (temp.getCode() == areaCode && temp.getCountry().getCode() == countryCode) {
                area = temp;
                break;
            }
        }
        return area;
    }

    public String getCountryCode() {
        return countryCodeTextField.getText().trim();
    }

    public String getCountryName() {
        return StringFormat.capitalizeNames(countryNameTextField.getText().trim());
    }

    public String getAreaCode() {
        return areaCodeTextField.getText().trim();
    }

    public String getAreaName() {
        return StringFormat.capitalizeNames(areaNameTextField.getText().trim());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel areaCodeLabel;
    private javax.swing.JTextField areaCodeTextField;
    private javax.swing.JLabel areaNameLabel;
    private javax.swing.JTextField areaNameTextField;
    private javax.swing.JPanel areaPanel;
    private javax.swing.JLabel countryCodeLabel;
    private javax.swing.JTextField countryCodeTextField;
    private javax.swing.JLabel countryNameLabel;
    private javax.swing.JTextField countryNameTextField;
    private javax.swing.JPanel countryPanel;
    // End of variables declaration//GEN-END:variables

    private List<Country> countriesList;
    private List<Area> areasList;

    private ResourceBundle bundle = ResourceBundle.getBundle("i18n/MainFrameBundle"); // NOI18N
    private static final Logger logger = LogManager.getLogger(AreaCreatorPanel.class);
}
