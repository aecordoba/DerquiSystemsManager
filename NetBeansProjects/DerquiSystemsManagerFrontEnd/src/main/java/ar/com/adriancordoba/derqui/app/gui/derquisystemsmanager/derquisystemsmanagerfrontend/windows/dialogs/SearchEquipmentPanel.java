/*
 * 		SearchEquipmentPanel.java
 *   Copyright (C) 2016  Adrián E. Córdoba [software.asia@gmail.com]
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * 		SearchEquipmentPanel.java
 *  Adrián E. Córdoba [software.asia@gmail.com] 		Nov 24, 2016
 */
package ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.windows.dialogs;

import ar.com.adriancordoba.app.console.commonservices.database.DatabaseConnectionsManager;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.descriptors.Technology;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.distributor.Site;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.equipment.Equipment;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.equipment.Neax61EEquipment;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.equipment.Neax61SigmaEquipment;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.equipment.SigmaL3AddressEquipment;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.equipment.ZhoneEquipment;
import ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.utils.SitesAnalyzer;
import java.sql.Connection;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Adrián E. Córdoba [software.asia@gmail.com]
 */
public class SearchEquipmentPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchEquipmentPanel
     */
    public SearchEquipmentPanel(SitesAnalyzer sitesAnalyzer) {
        this.sitesAnalyzer = sitesAnalyzer;
        siteComboBoxModel = new DefaultComboBoxModel<>();
        vacantEquipmentListModel = new DefaultListModel<>();

        initComponents();

        fillSiteComboBoxModel();
    }

    private void fillSiteComboBoxModel() {
        for (Site site : sitesAnalyzer.getSitesList())
            siteComboBoxModel.addElement(site);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        technologyButtonGroup = new javax.swing.ButtonGroup();
        searchPanel = new javax.swing.JPanel();
        technologyPanel = new javax.swing.JPanel();
        neax61eRadioButton = new javax.swing.JRadioButton();
        neax61sigmaRadioButton = new javax.swing.JRadioButton();
        zhoneRadioButton = new javax.swing.JRadioButton();
        neax61sigmaeluRadioButton = new javax.swing.JRadioButton();
        siteComboBox = new javax.swing.JComboBox<>();
        siteLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        equipmentScrollPane = new javax.swing.JScrollPane();
        equipmentList = new javax.swing.JList<>();

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/AssignmentInternalFrameBundle"); // NOI18N
        technologyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("SearchEquipmentPanel.technologyPanel.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        technologyButtonGroup.add(neax61eRadioButton);
        neax61eRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        neax61eRadioButton.setText(bundle.getString("SearchEquipmentPanel.neax61eRadioButton.text")); // NOI18N
        neax61eRadioButton.setEnabled(false);
        neax61eRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neax61eRadioButtonActionPerformed(evt);
            }
        });

        technologyButtonGroup.add(neax61sigmaRadioButton);
        neax61sigmaRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        neax61sigmaRadioButton.setText(bundle.getString("SearchEquipmentPanel.neax61sigmaRadioButton.text")); // NOI18N
        neax61sigmaRadioButton.setEnabled(false);
        neax61sigmaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neax61sigmaRadioButtonActionPerformed(evt);
            }
        });

        technologyButtonGroup.add(zhoneRadioButton);
        zhoneRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        zhoneRadioButton.setText(bundle.getString("SearchEquipmentPanel.zhoneRadioButton.text")); // NOI18N
        zhoneRadioButton.setEnabled(false);
        zhoneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zhoneRadioButtonActionPerformed(evt);
            }
        });

        technologyButtonGroup.add(neax61sigmaeluRadioButton);
        neax61sigmaeluRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        neax61sigmaeluRadioButton.setText(bundle.getString("SearchEquipmentPanel.neax61sigmaeluRadioButton.text")); // NOI18N
        neax61sigmaeluRadioButton.setEnabled(false);
        neax61sigmaeluRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neax61sigmaeluRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout technologyPanelLayout = new javax.swing.GroupLayout(technologyPanel);
        technologyPanel.setLayout(technologyPanelLayout);
        technologyPanelLayout.setHorizontalGroup(
            technologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(technologyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(technologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neax61eRadioButton)
                    .addComponent(neax61sigmaRadioButton)
                    .addComponent(zhoneRadioButton)
                    .addComponent(neax61sigmaeluRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        technologyPanelLayout.setVerticalGroup(
            technologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(technologyPanelLayout.createSequentialGroup()
                .addComponent(neax61eRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(neax61sigmaRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(neax61sigmaeluRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(zhoneRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        siteComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        siteComboBox.setModel(siteComboBoxModel);
        siteComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siteComboBoxActionPerformed(evt);
            }
        });

        siteLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        siteLabel.setText(bundle.getString("SearchEquipmentPanel.siteLabel.text")); // NOI18N

        searchButton.setText(bundle.getString("SearchEquipmentPanel.searchButton.text")); // NOI18N
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(technologyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addComponent(siteLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(siteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addComponent(searchButton)
                        .addContainerGap())))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(siteLabel)
                    .addComponent(siteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(technologyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        equipmentList.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        equipmentList.setModel(vacantEquipmentListModel);
        equipmentScrollPane.setViewportView(equipmentList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(equipmentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(equipmentScrollPane)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void siteComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siteComboBoxActionPerformed
        vacantEquipmentListModel.removeAllElements();
        Site selectedSite = (Site) siteComboBox.getSelectedItem();
        enableTechnologyRadioButtons(selectedSite.getTechnologiesList());
        boolean enabled = false;
        if (selectedSite.getId() != 0 && (neax61eRadioButton.isSelected() || neax61sigmaRadioButton.isSelected() || neax61sigmaeluRadioButton.isSelected() || zhoneRadioButton.isSelected()))
            enabled = true;
        searchButton.setEnabled(enabled);
    }//GEN-LAST:event_siteComboBoxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        int siteId = ((Site) siteComboBox.getSelectedItem()).getId();
        DatabaseConnectionsManager databaseConnectionsManager = null;
        Connection connection = null;
        try {
            databaseConnectionsManager = DatabaseConnectionsManager.getInstance();
            connection = databaseConnectionsManager.takeConnection();
            List<Equipment> vacantEquipmentList = null;
            if (neax61eRadioButton.isSelected())
                vacantEquipmentList = Neax61EEquipment.getVacantNeax61EEquipment(connection, siteId);
            else if (neax61sigmaRadioButton.isSelected())
                vacantEquipmentList = Neax61SigmaEquipment.getVacantNeax61SimaEquipment(connection, siteId);
            else if (neax61sigmaeluRadioButton.isSelected())
                vacantEquipmentList = SigmaL3AddressEquipment.getVacantSigmaL3AddressEquipment(connection, siteId);
            else if (zhoneRadioButton.isSelected())
                vacantEquipmentList = ZhoneEquipment.getVacantZhoneEquipment(connection, siteId);
            fillVacantEquipmentListModel(vacantEquipmentList);
        } catch (Exception exception) {
            logger.error("Cannot fill vacant equipment list.", exception);
            JOptionPane.showMessageDialog(this, bundle.getString("SearchEquipmentPanel.searchVacantEquipment.problem"), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            databaseConnectionsManager.returnConnection(connection);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void neax61eRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neax61eRadioButtonActionPerformed
        vacantEquipmentListModel.removeAllElements();
    }//GEN-LAST:event_neax61eRadioButtonActionPerformed

    private void neax61sigmaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neax61sigmaRadioButtonActionPerformed
        vacantEquipmentListModel.removeAllElements();
    }//GEN-LAST:event_neax61sigmaRadioButtonActionPerformed

    private void zhoneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zhoneRadioButtonActionPerformed
        vacantEquipmentListModel.removeAllElements();
    }//GEN-LAST:event_zhoneRadioButtonActionPerformed

    private void neax61sigmaeluRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neax61sigmaeluRadioButtonActionPerformed
        vacantEquipmentListModel.removeAllElements();
    }//GEN-LAST:event_neax61sigmaeluRadioButtonActionPerformed

    private void fillVacantEquipmentListModel(List<Equipment> vacantEquipmentList) {
        vacantEquipmentListModel.removeAllElements();
        for (Equipment vacantEquipment : vacantEquipmentList)
            vacantEquipmentListModel.addElement(vacantEquipment);
    }

    private void enableTechnologyRadioButtons(List<Technology> technologiesList) {
        neax61eRadioButton.setEnabled(false);
        neax61sigmaRadioButton.setEnabled(false);
        neax61sigmaeluRadioButton.setEnabled(false);
        zhoneRadioButton.setEnabled(false);
        for (Technology technology : technologiesList) {
            if (technology == Technology.NEAX61E)
                neax61eRadioButton.setEnabled(true);
            else if (technology == Technology.NEAX61SIGMA)
                neax61sigmaRadioButton.setEnabled(true);
            else if (technology == Technology.NEAX61SIGMA_ELU)
                neax61sigmaeluRadioButton.setEnabled(true);
            else if (technology == Technology.ZHONE)
                zhoneRadioButton.setEnabled(true);
        }
        selectFirstTechnologyRadioButton();
    }

    private void selectFirstTechnologyRadioButton() {
        if (neax61eRadioButton.isEnabled())
            neax61eRadioButton.setSelected(true);
        else if (neax61sigmaRadioButton.isEnabled())
            neax61sigmaRadioButton.setSelected(true);
        else if (neax61sigmaeluRadioButton.isEnabled())
            neax61sigmaeluRadioButton.setSelected(true);
        else if (zhoneRadioButton.isEnabled())
            zhoneRadioButton.setSelected(true);
    }

    public Site getSite() {
        Site selectedSite = null;
        if (siteComboBox.getSelectedIndex() != 0)
            selectedSite = (Site) siteComboBox.getSelectedItem();
        return selectedSite;
    }

    public Equipment getVacantEquipment() {
        Equipment selectedEquipment = null;
        if (equipmentList.getSelectedIndex() != -1)
            selectedEquipment = equipmentList.getSelectedValue();
        return selectedEquipment;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Equipment> equipmentList;
    private javax.swing.JScrollPane equipmentScrollPane;
    private javax.swing.JRadioButton neax61eRadioButton;
    private javax.swing.JRadioButton neax61sigmaRadioButton;
    private javax.swing.JRadioButton neax61sigmaeluRadioButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox<Site> siteComboBox;
    private javax.swing.JLabel siteLabel;
    private javax.swing.ButtonGroup technologyButtonGroup;
    private javax.swing.JPanel technologyPanel;
    private javax.swing.JRadioButton zhoneRadioButton;
    // End of variables declaration//GEN-END:variables

    private SitesAnalyzer sitesAnalyzer;

    // Models.
    private DefaultComboBoxModel<Site> siteComboBoxModel;
    private DefaultListModel<Equipment> vacantEquipmentListModel;

    private ResourceBundle bundle = ResourceBundle.getBundle("i18n/AssignmentInternalFrameBundle"); // NOI18N
    private static final Logger logger = LogManager.getLogger(SearchEquipmentPanel.class);
}
