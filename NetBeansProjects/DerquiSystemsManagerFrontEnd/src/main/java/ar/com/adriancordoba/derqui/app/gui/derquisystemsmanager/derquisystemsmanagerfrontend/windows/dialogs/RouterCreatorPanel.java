/*
 * 		RouterCreatorPanel.java
 *   Copyright (C) 2016  Adrián E. Córdoba [software.asia@gmail.com]
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * 		RouterCreatorPanel.java
 *  Adrián E. Córdoba [software.asia@gmail.com] 		Feb 4, 2017
 */
package ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.windows.dialogs;

import ar.com.adriancordoba.app.console.commonservices.database.DatabaseConnectionsManager;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.broadband.router.RouterManufacturer;
import ar.com.adriancordoba.derqui.app.console.derquisystemsmanager.derquisystemsmanagerdataaccess.model.broadband.router.RouterModel;
import ar.com.adriancordoba.derqui.app.gui.derquisystemsmanager.derquisystemsmanagerfrontend.utils.RoutersModelsAnalyzer;
import java.sql.Connection;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Adrián E. Córdoba [software.asia@gmail.com]
 */
public class RouterCreatorPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewRouterPanel
     */
    public RouterCreatorPanel() {
        createComponentsModels();

        initComponents();

        Connection connection = null;
        try {
            databaseConnectionsManager = DatabaseConnectionsManager.getInstance();
            connection = databaseConnectionsManager.takeConnection();

            routersModelsAnalyzer = new RoutersModelsAnalyzer(connection);

            fillComboBoxModel(routersModelsAnalyzer.getRoutersManufacturersList(), manufacturerComboBoxModel);
        } catch (Exception exception) {
            logger.error("Cannot fill combo boxes.", exception);
            JOptionPane.showMessageDialog(this, bundle.getString("DSLAMsInternalFrame.comboBoxes.problem"), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            databaseConnectionsManager.returnConnection(connection);
        }

    }

    private void createComponentsModels() {
        modelComboBoxModel = new DefaultComboBoxModel<>();
        manufacturerComboBoxModel = new DefaultComboBoxModel<>();
    }

    /**
     *
     * @param <T>
     * @param list
     * @param model
     */
    private <T> void fillComboBoxModel(List<T> list, DefaultComboBoxModel<T> model) {
        for (T element : list)
            model.addElement(element);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        ipAddressLabel = new javax.swing.JLabel();
        ipAddressTextField = new javax.swing.JTextField();
        modelLabel = new javax.swing.JLabel();
        modelComboBox = new javax.swing.JComboBox<>();
        portsLabel = new javax.swing.JLabel();
        portsTextField = new javax.swing.JTextField();
        manufacturerLabel = new javax.swing.JLabel();
        manufacturerComboBox = new javax.swing.JComboBox<>();

        nameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/DSLAMsInternalFrameBundle"); // NOI18N
        nameLabel.setText(bundle.getString("RouterCreatorPanel.nameLabel.text")); // NOI18N

        nameTextField.setText(bundle.getString("RouterCreatorPanel.nameTextField.text")); // NOI18N

        ipAddressLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ipAddressLabel.setText(bundle.getString("RouterCreatorPanel.ipAddressLabel.text")); // NOI18N

        ipAddressTextField.setText(bundle.getString("RouterCreatorPanel.ipAddressTextField.text")); // NOI18N

        modelLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        modelLabel.setText(bundle.getString("RouterCreatorPanel.modelLabel.text")); // NOI18N

        modelComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        modelComboBox.setModel(modelComboBoxModel);
        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });

        portsLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        portsLabel.setText(bundle.getString("RouterCreatorPanel.portsLabel.text")); // NOI18N

        portsTextField.setEditable(false);
        portsTextField.setText(bundle.getString("RouterCreatorPanel.portsTextField.text")); // NOI18N

        manufacturerLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        manufacturerLabel.setText(bundle.getString("RouterCreatorPanel.manufacturerLabel.text")); // NOI18N

        manufacturerComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        manufacturerComboBox.setModel(manufacturerComboBoxModel);
        manufacturerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturerComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(nameLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ipAddressLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ipAddressTextField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(manufacturerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manufacturerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modelLabel)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipAddressLabel)
                    .addComponent(ipAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manufacturerLabel)
                    .addComponent(manufacturerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelLabel)
                    .addComponent(modelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portsLabel)
                    .addComponent(portsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void manufacturerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturerComboBoxActionPerformed
        modelComboBoxModel.removeAllElements();
        if (manufacturerComboBox.getSelectedIndex() > 0) {
            int selectedManufacturerId = ((RouterManufacturer) manufacturerComboBox.getSelectedItem()).getId();
            fillComboBoxModel(routersModelsAnalyzer.getRoutersModelsList(selectedManufacturerId), modelComboBoxModel);
        } else
            fillComboBoxModel(routersModelsAnalyzer.getRoutersModelsList(), modelComboBoxModel);
    }//GEN-LAST:event_manufacturerComboBoxActionPerformed

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelComboBoxActionPerformed
        RouterModel selectedModel = (RouterModel) modelComboBox.getSelectedItem();
        if (selectedModel != null)
            portsTextField.setText(String.valueOf(selectedModel.getPorts()));
    }//GEN-LAST:event_modelComboBoxActionPerformed

    public String getName() {
        return nameTextField.getText();
    }

    public String getIPAddress() {
        return ipAddressTextField.getText();
    }

    public RouterModel getModel() {
        return (RouterModel) modelComboBox.getSelectedItem();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ipAddressLabel;
    private javax.swing.JTextField ipAddressTextField;
    private javax.swing.JComboBox<RouterManufacturer> manufacturerComboBox;
    private javax.swing.JLabel manufacturerLabel;
    private javax.swing.JComboBox<RouterModel> modelComboBox;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel portsLabel;
    private javax.swing.JTextField portsTextField;
    // End of variables declaration//GEN-END:variables

    private DatabaseConnectionsManager databaseConnectionsManager;
    private RoutersModelsAnalyzer routersModelsAnalyzer;

    // Models.
    private DefaultComboBoxModel<RouterModel> modelComboBoxModel;
    private DefaultComboBoxModel<RouterManufacturer> manufacturerComboBoxModel;

    private ResourceBundle bundle = ResourceBundle.getBundle("i18n/DSLAMsInternalFrameBundle"); // NOI18N
    private static final Logger logger = LogManager.getLogger(RouterCreatorPanel.class);
}
